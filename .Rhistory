library(dplyr)
library(ggplot2)
library(GGally)
library(vioplot)
library(corpcor)
library(ppcor)
library(mctest)
library(ggfortify)
library(lmtest)
library(MASS)
library(car)
library(DAAG)
library(jtools)
library(dplyr);
library(ggplot2);
library(GGally);
library(vioplot);
library(corpcor);
library(ppcor);
library(mctest);
library(ggfortify);
library(lmtest);
library(MASS);
library(car);
library(DAAG);
library(jtools);
data = read.csv("Admission_Data.csv")
df = data[,2:9]
summary(df)
par(mfrow=c(4, 2))
colnames = names(df)
for(name in colnames) {
vioplot(df[name], horizontal=TRUE, col='gold', lineCol='gold', lty=0, colMed='floralwhite', yaxt='n',rectCol='dodgerblue4')
title(main=name)
}
ggpairs(df, progress=FALSE)
pcorr = as.data.frame(cor2pcor(cov(df)))
names(pcorr) = names(df)
rownames(pcorr) = names(df)
pcorr = format(pcorr, digits=1)
print.data.frame(pcorr)
imcdiag(df[,1:7],df$Chance.of.Admit)
fit = lm(Chance.of.Admit ~ ., data=df)
summary(fit)
autoplot(fit)
bptest(fit)
bc = boxcox(Chance.of.Admit ~ ., data=df);
lambda = bc$x[which.max(bc$y)]
powerTransform <- function(y, lambda1, lambda2 = NULL, method = "boxcox") {
boxcoxTrans <- function(x, lam1, lam2 = NULL) {
# if we set lambda2 to zero, it becomes the one parameter transformation
lam2 <- ifelse(is.null(lam2), 0, lam2)
if (lam1 == 0L) {
log(y + lam2)
} else {
(((y + lam2)^lam1) - 1) / lam1
}
}
switch(method
, boxcox = boxcoxTrans(y, lambda1, lambda2)
, tukey = y^lambda1
)
}
# re-run with transformation
bcfit <- lm(powerTransform(Chance.of.Admit, lambda) ~ ., data=df)
summary(bcfit)
cooksd <- cooks.distance(fit)
sample_size <- nrow(df)
plot(cooksd, pch="*", cex=2, main="Influential Obs by Cooks distance")
abline(h = 4/sample_size, col="red")
text(x=1:length(cooksd)+1, y=cooksd, labels=ifelse(cooksd>4/sample_size, names(cooksd),""), col="red")
influential = as.numeric(names(cooksd)[(cooksd > (4/sample_size))])
df2 = df[-influential, ]
fit2 = lm(Chance.of.Admit ~ ., data=df2)
summary(fit2)
fit3 = lm(exp(Chance.of.Admit) ~ ., data=df2)
summary(fit3)
fit4 = lm(exp(Chance.of.Admit) ~ GRE.Score*University.Rating+TOEFL.Score+Research+SOP+LOR+CGPA, data=df2)
summary(fit4)
anova(fit3, fit4)
step <- stepAIC(fit4, direction="both")
step$anova
cv_new = CVlm(data=df2, fit4, m=3, printit=FALSE)
attr(cv_new, "ms")
export_summs(fit4, error_format = "[{conf.low}, {conf.high}]", digits=5)
plot_summs(fit4)
effect_plot(fit4, pred = GRE.Score, interval = TRUE, plot.points = TRUE)
effect_plot(fit4, pred = University.Rating, interval = TRUE, plot.points = TRUE)
effect_plot(fit4, pred = TOEFL.Score, interval = TRUE, plot.points = TRUE)
effect_plot(fit4, pred = Research, interval = TRUE, plot.points = TRUE)
effect_plot(fit4, pred = SOP, interval = TRUE, plot.points = TRUE)
effect_plot(fit4, pred = LOR, interval = TRUE, plot.points = TRUE)
effect_plot(fit4, pred = CGPA, interval = TRUE, plot.points = TRUE)
effect_plot(fit4, pred = GRE.Score:University.Rating, interval = TRUE, plot.points = TRUE)
effect_plot(fit4, pred = GRE.Score, interval = TRUE, plot.points = TRUE)
effect_plot(fit4, pred = University.Rating, interval = TRUE, plot.points = TRUE)
effect_plot(fit4, pred = TOEFL.Score, interval = TRUE, plot.points = TRUE)
effect_plot(fit4, pred = Research, interval = TRUE, plot.points = TRUE)
effect_plot(fit4, pred = SOP, interval = TRUE, plot.points = TRUE)
effect_plot(fit4, pred = LOR, interval = TRUE, plot.points = TRUE)
effect_plot(fit4, pred = CGPA, interval = TRUE, plot.points = TRUE)
plot(df4$Chance.of.Admit, df4$CGPA)
plot(df2$Chance.of.Admit, df2$CGPA)
abline(fit4, color="lightblue")
confint(fit4)
confint(fit4)
export_summs(fit4, error_format = "[{conf.low}, {conf.high}]", digits=5)
influence(fit4)
install.packages("relaimpo")
library(relaimpo)
calc.relimp(fit,type=c("lmg","last","first","pratt"),
rela=TRUE)
library(dplyr);
library(ggplot2);
library(GGally);
library(vioplot);
library(corpcor);
library(ppcor);
library(mctest);
library(ggfortify);
library(lmtest);
library(MASS);
library(car);
library(DAAG);
library(jtools);
library(relaimpo);
calc.relimp(fit4,type=c("lmg","last","first","pratt"), rela=TRUE)
calc.relimp(fit4, type=c("lmg","last","first","pratt"), rela=TRUE)
calc.relimp(fit4,type=c("lmg","last","first","pratt"), rela=TRUE)
library(dplyr);
library(ggplot2);
library(GGally);
library(vioplot);
library(corpcor);
library(ppcor);
library(mctest);
library(ggfortify);
library(lmtest);
library(MASS);
library(car);
library(DAAG);
library(jtools);
library(relaimpo);
calc.relimp(fit4,type=c("lmg","last","first","pratt"),
rela=TRUE)
calc.relimp(fit,type=c("lmg","last","first","pratt"),
rela=TRUE)
calc.relimp(fit4,type=c("lmg","last","first","pratt"),
rela=TRUE)
calc.relimp(fit4,type="lmg", rela=TRUE)
calc.relimp(fit4,type="lmg", rela=TRUE)
calc.relimp(fit4,type="lmg", rela=TRUE)
fit5 = lm(exp(Chance.of.Admit) ~ GRE.Score*University.Rating+TOEFL.Score+Research+LOR+CGPA, data=df2)
summary(fit5)
fit5 = lm(exp(Chance.of.Admit) ~ GRE.Score*University.Rating+TOEFL.Score+Research+LOR+CGPA, data=df2)
summary(fit5)
step <- stepAIC(fit5, direction="both")
step$anova
calc.relimp(fit5,type="lmg", rela=TRUE)
cv_new = CVlm(data=df2, fit5, m=3, printit=FALSE)
attr(cv_new, "ms")
export_summs(fit5, error_format = "[{conf.low}, {conf.high}]", digits=5)
plot_summs(fit5)
effect_plot(fit4, pred = GRE.Score, interval = TRUE, plot.points = TRUE)
effect_plot(fit4, pred = University.Rating, interval = TRUE, plot.points = TRUE)
effect_plot(fit4, pred = TOEFL.Score, interval = TRUE, plot.points = TRUE)
effect_plot(fit4, pred = Research, interval = TRUE, plot.points = TRUE)
effect_plot(fit4, pred = LOR, interval = TRUE, plot.points = TRUE)
effect_plot(fit4, pred = CGPA, interval = TRUE, plot.points = TRUE)
anova(fit3, fit4)
summary(fit5)
View(df)
df3 = data.frame()
for(name in names(df)) {
df3[name] = df[name] - mean(df[name])
}
df[name]
View(df)
# df3[name] = df[name] - mean(df[name])
names(df)
df3["GRE.Score"] = df["GRE.Score"] - mean(df["GRE.Score"])
# df3 = data.frame()
# df3["GRE.Score"] = df["GRE.Score"] - mean(df["GRE.Score"])
# names(df)
df["GRE.Score"] - mean(df["GRE.Score"])
# df3 = data.frame()
# df3["GRE.Score"] = df["GRE.Score"] - mean(df["GRE.Score"])
# names(df)
df.GRE.Score - mean(df.GRE.Score)
# df3 = data.frame()
# df3["GRE.Score"] = df["GRE.Score"] - mean(df["GRE.Score"])
# names(df)
df["GRE.Score"]
# df3 = data.frame()
# df3["GRE.Score"] = df["GRE.Score"] - mean(df["GRE.Score"])
# names(df)
mean(df["GRE.Score"])
# df3 = data.frame()
# df3["GRE.Score"] = df["GRE.Score"] - mean(df["GRE.Score"])
# names(df)
mean(as.vector(df["GRE.Score"]))
# df3 = data.frame()
# df3["GRE.Score"] = df["GRE.Score"] - mean(df["GRE.Score"])
# names(df)
# mean(df["GRE.Score"])
df["GRE.Score"]
# df3 = data.frame()
# df3["GRE.Score"] = df["GRE.Score"] - mean(df["GRE.Score"])
# names(df)
# mean(df["GRE.Score"])
df["GRE.Score"].tolist()
# df3 = data.frame()
# df3["GRE.Score"] = df["GRE.Score"] - mean(df["GRE.Score"])
# names(df)
# mean(df["GRE.Score"])
as.vector(df["GRE.Score"])
# df3 = data.frame()
# df3["GRE.Score"] = df["GRE.Score"] - mean(df["GRE.Score"])
# names(df)
# mean(df["GRE.Score"])
mean(as.vector(df["GRE.Score"]))
# df3 = data.frame()
# df3["GRE.Score"] = df["GRE.Score"] - mean(df["GRE.Score"])
# names(df)
# mean(df["GRE.Score"])
df["GRE.Score"]
# df3 = data.frame()
# df3["GRE.Score"] = df["GRE.Score"] - mean(df["GRE.Score"])
# names(df)
# mean(df["GRE.Score"])
df["GRE.Score"].mean()
# df3 = data.frame()
# df3["GRE.Score"] = df["GRE.Score"] - mean(df["GRE.Score"])
# names(df)
mean(df[["GRE.Score"]])
df3 = data.frame()
for(name in names(df)) {
df3[name] = df[name] - mean(df[[name]])
}
df[["GRE.Score"]]
df3 = data.frame()
for(name in names(df)) {
df3[name] = df[[name]] - mean(df[name])
}
df3 = data.frame()
for(name in names(df)) {
df3[name] = df[[name]] - mean(df[[name]])
}
df3 = data.frame()
for(name in names(df)) {
df3[[name]] = df[[name]] - mean(df[[name]])
}
df3 = data.frame()
for(name in names(df)) {
cat(df[[name]] - mean(df[[name]]))
}
df3 = data.frame()
names(df3) = names(df)
df3 = df
for(name in names(df)) {
df3[name] = df[[name]] - mean(df[[name]])
}
View(df3)
fit6 = lm(Chance.of.Admit ~ ., data=df3)
summary(fit6)
summary(fit6)
autoplot(fit)
rmarkdown::render()
